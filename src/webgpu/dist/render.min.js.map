{"version":3,"sources":["render.tsx"],"names":["terrain_generator_1","require","wgsl_1","Renderer","adapter","device","canvasRef","colormap","this","uniform2DBuffer","terrainGenerator","bindGroup2D","nodeBindGroup","nodePositionBuffer","nodePipeline","nodeLength","current","context","getContext","devicePixelRatio","window","presentationSize","clientWidth","clientHeight","presentationFormat","getPreferredFormat","configure","format","size","createBuffer","usage","GPUBufferUsage","VERTEX","mappedAtCreation","Float32Array","getMappedRange","set","unmap","createRenderPipeline","vertex","module","createShaderModule","code","node_vert","entryPoint","buffers","arrayStride","attributes","offset","shaderLocation","fragment","node_frag","targets","primitive","topology","depthStencil","depthWriteEnabled","depthCompare","pipeline","display_2d_vert","display_2d_frag","dataBuf2D","UNIFORM","COPY_DST","queue","writeBuffer","imageSizeBuffer","Uint32Array","STORAGE","colorTexture","createTexture","width","height","GPUTextureUsage","TEXTURE_BINDING","RENDER_ATTACHMENT","copyExternalImageToTexture","source","texture","depthTexture","depthOrArrayLayers","createBindGroup","layout","getBindGroupLayout","entries","binding","resource","createView","buffer","pixelValueBuffer","render","requestAnimationFrame","frame","commandEncoder","createCommandEncoder","renderPassDescriptor","colorAttachments","view","getCurrentTexture","loadValue","r","g","b","a","storeOp","depthStencilAttachment","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","passEncoder","beginRenderPass","setPipeline","setVertexBuffer","setBindGroup","draw","endPass","submit","finish","prototype","setNodeData","nodeData","computeTerrain","nodePositions","radius","i","length","x","y","push","setWidthFactor","widthFactor","undefined","setPeakValue","value","setValleyValue","exports"],"mappings":"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","file":"render.min.js","sourcesContent":["import TerrainGenerator from \"./terrain_generator\";\r\nimport { display_2d_vert, display_2d_frag, node_vert, node_frag } from \"./wgsl\";\r\n\r\nclass Renderer {\r\n  public uniform2DBuffer: GPUBuffer | null = null;\r\n  public terrainGenerator: TerrainGenerator | null = null;\r\n  public device: GPUDevice;\r\n  public bindGroup2D: GPUBindGroup | null = null;\r\n  public nodeBindGroup: GPUBindGroup | null = null;\r\n  public nodePositionBuffer: GPUBuffer | null = null;\r\n  public nodePipeline: GPURenderPipeline | null = null;\r\n  public nodeLength: number = 1;\r\n\r\n  constructor(\r\n    adapter: GPUAdapter,\r\n    device: GPUDevice,\r\n    canvasRef: React.RefObject<HTMLCanvasElement>,\r\n    colormap: ImageBitmap\r\n  ) {\r\n    this.device = device;\r\n    // Check that canvas is active\r\n    if (canvasRef.current === null) return;\r\n    const context = canvasRef.current.getContext(\"webgpu\")!;\r\n\r\n    const devicePixelRatio = window.devicePixelRatio || 1;\r\n    const presentationSize = [\r\n      canvasRef.current.clientWidth * devicePixelRatio,\r\n      canvasRef.current.clientHeight * devicePixelRatio,\r\n    ];\r\n    const presentationFormat = context.getPreferredFormat(adapter);\r\n\r\n    context.configure({\r\n      device,\r\n      format: presentationFormat,\r\n      size: presentationSize,\r\n    });\r\n\r\n    this.nodePositionBuffer = device.createBuffer({\r\n      size: 6 * 2 * 4,\r\n      usage: GPUBufferUsage.VERTEX,\r\n      mappedAtCreation: true,\r\n    });\r\n    new Float32Array(this.nodePositionBuffer.getMappedRange()).set([\r\n      1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1,\r\n    ]);\r\n    this.nodePositionBuffer.unmap();\r\n\r\n    this.nodePipeline = device.createRenderPipeline({\r\n      vertex: {\r\n        module: device.createShaderModule({\r\n          code: node_vert,\r\n        }),\r\n        entryPoint: \"main\",\r\n        buffers: [\r\n          {\r\n            arrayStride: 2 * 4,\r\n            attributes: [\r\n              {\r\n                format: \"float32x2\" as GPUVertexFormat,\r\n                offset: 0,\r\n                shaderLocation: 0,\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n      fragment: {\r\n        module: device.createShaderModule({\r\n          code: node_frag,\r\n        }),\r\n        entryPoint: \"main\",\r\n        targets: [\r\n          {\r\n            format: presentationFormat,\r\n          },\r\n        ],\r\n      },\r\n      primitive: {\r\n        topology: \"triangle-list\",\r\n      },\r\n      depthStencil: {\r\n        format: \"depth24plus-stencil8\",\r\n        depthWriteEnabled: true,\r\n        depthCompare: \"less\",\r\n      },\r\n    });\r\n\r\n    const pipeline = device.createRenderPipeline({\r\n      vertex: {\r\n        module: device.createShaderModule({\r\n          code: display_2d_vert,\r\n        }),\r\n        entryPoint: \"main\",\r\n        buffers: [\r\n          {\r\n            arrayStride: 4 * 4,\r\n            attributes: [\r\n              {\r\n                format: \"float32x4\" as GPUVertexFormat,\r\n                offset: 0,\r\n                shaderLocation: 0,\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n      fragment: {\r\n        module: device.createShaderModule({\r\n          code: display_2d_frag,\r\n        }),\r\n        entryPoint: \"main\",\r\n        targets: [\r\n          {\r\n            format: presentationFormat,\r\n          },\r\n        ],\r\n      },\r\n      primitive: {\r\n        topology: \"triangle-list\",\r\n      },\r\n      depthStencil: {\r\n        format: \"depth24plus-stencil8\",\r\n        depthWriteEnabled: true,\r\n        depthCompare: \"less\",\r\n      },\r\n    });\r\n\r\n    // Vertices to render\r\n    var dataBuf2D = device.createBuffer({\r\n      size: 6 * 4 * 4,\r\n      usage: GPUBufferUsage.VERTEX,\r\n      mappedAtCreation: true,\r\n    });\r\n    new Float32Array(dataBuf2D.getMappedRange()).set([\r\n      1,\r\n      -1,\r\n      0,\r\n      1, // position\r\n      -1,\r\n      -1,\r\n      0,\r\n      1, // position\r\n      -1,\r\n      1,\r\n      0,\r\n      1, // position\r\n      1,\r\n      -1,\r\n      0,\r\n      1, // position\r\n      -1,\r\n      1,\r\n      0,\r\n      1, // position\r\n      1,\r\n      1,\r\n      0,\r\n      1, // position\r\n    ]);\r\n    dataBuf2D.unmap();\r\n\r\n    // Set up uniform buffers for bind group\r\n    this.uniform2DBuffer = device.createBuffer({\r\n      size: 2 * 4,\r\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n    });\r\n    device.queue.writeBuffer(\r\n      this.uniform2DBuffer,\r\n      0,\r\n      new Float32Array([0.8, 0.2]),\r\n      0,\r\n      2\r\n    );\r\n    const imageSizeBuffer = device.createBuffer({\r\n      size: 2 * 4,\r\n      usage: GPUBufferUsage.UNIFORM,\r\n      mappedAtCreation: true,\r\n    });\r\n    new Uint32Array(imageSizeBuffer.getMappedRange()).set(presentationSize);\r\n    imageSizeBuffer.unmap();\r\n    const nodeDataBuffer = device.createBuffer({\r\n      size: 16,\r\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\r\n    });\r\n\r\n    // Load colormap texture\r\n    const colorTexture = device.createTexture({\r\n      size: [colormap.width, colormap.height, 1],\r\n      format: \"rgba8unorm\",\r\n      usage:\r\n        GPUTextureUsage.TEXTURE_BINDING |\r\n        GPUTextureUsage.COPY_DST |\r\n        GPUTextureUsage.RENDER_ATTACHMENT,\r\n    });\r\n    device.queue.copyExternalImageToTexture(\r\n      { source: colormap },\r\n      { texture: colorTexture },\r\n      [colormap.width, colormap.height, 1]\r\n    );\r\n\r\n    // Create depth texture\r\n    var depthTexture = device.createTexture({\r\n      size: {\r\n        width: presentationSize[0],\r\n        height: presentationSize[1],\r\n        depthOrArrayLayers: 1,\r\n      },\r\n      format: \"depth24plus-stencil8\",\r\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\r\n    });\r\n\r\n    this.terrainGenerator = new TerrainGenerator(\r\n      device,\r\n      presentationSize[0],\r\n      presentationSize[1]\r\n    );\r\n\r\n    this.bindGroup2D = device.createBindGroup({\r\n      layout: pipeline.getBindGroupLayout(0),\r\n      entries: [\r\n        {\r\n          binding: 0,\r\n          resource: colorTexture.createView(),\r\n        },\r\n        {\r\n          binding: 1,\r\n          resource: {\r\n            buffer: this.terrainGenerator.pixelValueBuffer,\r\n          },\r\n        },\r\n        {\r\n          binding: 2,\r\n          resource: {\r\n            buffer: this.uniform2DBuffer,\r\n          },\r\n        },\r\n        {\r\n          binding: 3,\r\n          resource: {\r\n            buffer: imageSizeBuffer,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n    // this.nodeBindGroup = device.createBindGroup({\r\n    //   layout: pipeline.getBindGroupLayout(1),\r\n    //   entries: [\r\n    //     {\r\n    //       binding: 0,\r\n    //       resource: {\r\n    //         buffer: nodeDataBuffer,\r\n    //       }\r\n    //     }\r\n    //   ]\r\n    // });\r\n    var render = this;\r\n    function frame() {\r\n      // Sample is no longer the active page.\r\n      if (!canvasRef.current) return;\r\n\r\n      const commandEncoder = device.createCommandEncoder();\r\n      const textureView = context.getCurrentTexture().createView();\r\n\r\n      const renderPassDescriptor: GPURenderPassDescriptor = {\r\n        colorAttachments: [\r\n          {\r\n            view: textureView,\r\n            loadValue: { r: 0.157, g: 0.173, b: 0.204, a: 1.0 },\r\n            storeOp: \"store\" as GPUStoreOp,\r\n          },\r\n        ],\r\n        depthStencilAttachment: {\r\n          view: depthTexture.createView(),\r\n          depthLoadValue: 1.0,\r\n          depthStoreOp: \"store\",\r\n          stencilLoadValue: 0,\r\n          stencilStoreOp: \"store\",\r\n        },\r\n      };\r\n\r\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\r\n\r\n      passEncoder.setPipeline(pipeline);\r\n      passEncoder.setVertexBuffer(0, dataBuf2D);\r\n      passEncoder.setBindGroup(0, render.bindGroup2D!);\r\n      passEncoder.draw(6, 1, 0, 0);\r\n      passEncoder.setPipeline(render.nodePipeline!);\r\n      passEncoder.setVertexBuffer(0, render.nodePositionBuffer!);\r\n      passEncoder.draw(render.nodeLength * 6, 1, 0, 0);\r\n      passEncoder.endPass();\r\n\r\n      device.queue.submit([commandEncoder.finish()]);\r\n      requestAnimationFrame(frame);\r\n    }\r\n\r\n    requestAnimationFrame(frame);\r\n  }\r\n\r\n  setNodeData(nodeData: Array<number>) {\r\n    // TODO: Implement the translation and global range options\r\n    this.terrainGenerator!.computeTerrain(nodeData);\r\n    var nodePositions: Array<number> = [];\r\n    var radius: number = 0.01;\r\n    for (var i = 0; i < nodeData.length; i += 4) {\r\n      var x = nodeData[i + 1] * 2 - 1;\r\n      var y = nodeData[i + 2] * 2 - 1;\r\n      nodePositions.push(\r\n        x + radius,\r\n        y - radius,\r\n        x - radius,\r\n        y - radius,\r\n        x - radius,\r\n        y + radius,\r\n        x + radius,\r\n        y - radius,\r\n        x - radius,\r\n        y + radius,\r\n        x + radius,\r\n        y + radius\r\n      );\r\n    }\r\n    this.nodePositionBuffer = this.device.createBuffer({\r\n      size: nodePositions.length * 4,\r\n      usage: GPUBufferUsage.VERTEX,\r\n      mappedAtCreation: true,\r\n    });\r\n    new Float32Array(this.nodePositionBuffer.getMappedRange()).set(\r\n      nodePositions\r\n    );\r\n    this.nodePositionBuffer.unmap();\r\n    this.nodeLength = nodeData.length / 4;\r\n\r\n    // this.nodeBindGroup = this.device.createBindGroup({\r\n    //   layout: this.nodePipeline!.getBindGroupLayout(1),\r\n    //   entries: [\r\n    //     {\r\n    //       binding: 0,\r\n    //       resource: {\r\n    //         buffer: this.terrainGenerator!.nodeDataBuffer,\r\n    //       }\r\n    //     }\r\n    //   ]\r\n    // });\r\n  }\r\n\r\n  setWidthFactor(widthFactor: number) {\r\n    this.terrainGenerator!.computeTerrain(undefined, widthFactor);\r\n  }\r\n\r\n  setPeakValue(value: number) {\r\n    this.device.queue.writeBuffer(\r\n      this.uniform2DBuffer!,\r\n      0,\r\n      new Float32Array([value]),\r\n      0,\r\n      1\r\n    );\r\n  }\r\n\r\n  setValleyValue(value: number) {\r\n    this.device.queue.writeBuffer(\r\n      this.uniform2DBuffer!,\r\n      4,\r\n      new Float32Array([value]),\r\n      0,\r\n      1\r\n    );\r\n  }\r\n}\r\nexport default Renderer;\r\n"]}