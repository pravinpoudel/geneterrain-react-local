{"version":3,"sources":["render.tsx"],"names":[],"mappings":";;AAAA,yDAAmD;AACnD,+BAAgF;AAEhF;IAUE,kBACE,OAAmB,EACnB,MAAiB,EACjB,SAA6C,EAC7C,QAAqB;QAbhB,oBAAe,GAAqB,IAAI,CAAC;QACzC,qBAAgB,GAA4B,IAAI,CAAC;QAEjD,gBAAW,GAAwB,IAAI,CAAC;QACxC,kBAAa,GAAwB,IAAI,CAAC;QAC1C,uBAAkB,GAAqB,IAAI,CAAC;QAC5C,iBAAY,GAA6B,IAAI,CAAC;QAC9C,eAAU,GAAW,CAAC,CAAC;QAQ5B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,8BAA8B;QAC9B,IAAI,SAAS,CAAC,OAAO,KAAK,IAAI;YAAE,OAAO;QACvC,IAAM,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAE,CAAC;QAExD,IAAM,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,IAAI,CAAC,CAAC;QACtD,IAAM,gBAAgB,GAAG;YACvB,SAAS,CAAC,OAAO,CAAC,WAAW,GAAG,gBAAgB;YAChD,SAAS,CAAC,OAAO,CAAC,YAAY,GAAG,gBAAgB;SAClD,CAAC;QACF,IAAM,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QAE/D,OAAO,CAAC,SAAS,CAAC;YAChB,MAAM,QAAA;YACN,MAAM,EAAE,kBAAkB;YAC1B,IAAI,EAAE,gBAAgB;SACvB,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC,YAAY,CAAC;YAC5C,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC;YACf,KAAK,EAAE,cAAc,CAAC,MAAM;YAC5B,gBAAgB,EAAE,IAAI;SACvB,CAAC,CAAC;QACH,IAAI,YAAY,CAAC,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,CAAC,CAAC,GAAG,CAAC;YAC7D,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;SACzC,CAAC,CAAC;QACH,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,CAAC;QAEhC,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,oBAAoB,CAAC;YAC9C,MAAM,EAAE;gBACN,MAAM,EAAE,MAAM,CAAC,kBAAkB,CAAC;oBAChC,IAAI,EAAE,gBAAS;iBAChB,CAAC;gBACF,UAAU,EAAE,MAAM;gBAClB,OAAO,EAAE;oBACP;wBACE,WAAW,EAAE,CAAC,GAAG,CAAC;wBAClB,UAAU,EAAE;4BACV;gCACE,MAAM,EAAE,WAA8B;gCACtC,MAAM,EAAE,CAAC;gCACT,cAAc,EAAE,CAAC;6BAClB;yBACF;qBACF;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,MAAM,EAAE,MAAM,CAAC,kBAAkB,CAAC;oBAChC,IAAI,EAAE,gBAAS;iBAChB,CAAC;gBACF,UAAU,EAAE,MAAM;gBAClB,OAAO,EAAE;oBACP;wBACE,MAAM,EAAE,kBAAkB;qBAC3B;iBACF;aACF;YACD,SAAS,EAAE;gBACT,QAAQ,EAAE,eAAe;aAC1B;YACD,YAAY,EAAE;gBACZ,MAAM,EAAE,sBAAsB;gBAC9B,iBAAiB,EAAE,IAAI;gBACvB,YAAY,EAAE,MAAM;aACrB;SACF,CAAC,CAAC;QAEH,IAAM,QAAQ,GAAG,MAAM,CAAC,oBAAoB,CAAC;YAC3C,MAAM,EAAE;gBACN,MAAM,EAAE,MAAM,CAAC,kBAAkB,CAAC;oBAChC,IAAI,EAAE,sBAAe;iBACtB,CAAC;gBACF,UAAU,EAAE,MAAM;gBAClB,OAAO,EAAE;oBACP;wBACE,WAAW,EAAE,CAAC,GAAG,CAAC;wBAClB,UAAU,EAAE;4BACV;gCACE,MAAM,EAAE,WAA8B;gCACtC,MAAM,EAAE,CAAC;gCACT,cAAc,EAAE,CAAC;6BAClB;yBACF;qBACF;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,MAAM,EAAE,MAAM,CAAC,kBAAkB,CAAC;oBAChC,IAAI,EAAE,sBAAe;iBACtB,CAAC;gBACF,UAAU,EAAE,MAAM;gBAClB,OAAO,EAAE;oBACP;wBACE,MAAM,EAAE,kBAAkB;qBAC3B;iBACF;aACF;YACD,SAAS,EAAE;gBACT,QAAQ,EAAE,eAAe;aAC1B;YACD,YAAY,EAAE;gBACZ,MAAM,EAAE,sBAAsB;gBAC9B,iBAAiB,EAAE,IAAI;gBACvB,YAAY,EAAE,MAAM;aACrB;SACF,CAAC,CAAC;QAEH,qBAAqB;QACrB,IAAI,SAAS,GAAG,MAAM,CAAC,YAAY,CAAC;YAClC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC;YACf,KAAK,EAAE,cAAc,CAAC,MAAM;YAC5B,gBAAgB,EAAE,IAAI;SACvB,CAAC,CAAC;QACH,IAAI,YAAY,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC,CAAC,GAAG,CAAC;YAC/C,CAAC;YACD,CAAC,CAAC;YACF,CAAC;YACD,CAAC;YACD,CAAC,CAAC;YACF,CAAC,CAAC;YACF,CAAC;YACD,CAAC;YACD,CAAC,CAAC;YACF,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC,CAAC;YACF,CAAC;YACD,CAAC;YACD,CAAC,CAAC;YACF,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;YACD,CAAC;SACF,CAAC,CAAC;QACH,SAAS,CAAC,KAAK,EAAE,CAAC;QAElB,wCAAwC;QACxC,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,YAAY,CAAC;YACzC,IAAI,EAAE,CAAC,GAAG,CAAC;YACX,KAAK,EAAE,cAAc,CAAC,OAAO,GAAG,cAAc,CAAC,QAAQ;SACxD,CAAC,CAAC;QACH,MAAM,CAAC,KAAK,CAAC,WAAW,CACtB,IAAI,CAAC,eAAe,EACpB,CAAC,EACD,IAAI,YAAY,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAC5B,CAAC,EACD,CAAC,CACF,CAAC;QACF,IAAM,eAAe,GAAG,MAAM,CAAC,YAAY,CAAC;YAC1C,IAAI,EAAE,CAAC,GAAG,CAAC;YACX,KAAK,EAAE,cAAc,CAAC,OAAO;YAC7B,gBAAgB,EAAE,IAAI;SACvB,CAAC,CAAC;QACH,IAAI,WAAW,CAAC,eAAe,CAAC,cAAc,EAAE,CAAC,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QACxE,eAAe,CAAC,KAAK,EAAE,CAAC;QACxB,IAAM,cAAc,GAAG,MAAM,CAAC,YAAY,CAAC;YACzC,IAAI,EAAE,EAAE;YACR,KAAK,EAAE,cAAc,CAAC,OAAO,GAAG,cAAc,CAAC,QAAQ;SACxD,CAAC,CAAC;QAEH,wBAAwB;QACxB,IAAM,YAAY,GAAG,MAAM,CAAC,aAAa,CAAC;YACxC,IAAI,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;YAC1C,MAAM,EAAE,YAAY;YACpB,KAAK,EACH,eAAe,CAAC,eAAe;gBAC/B,eAAe,CAAC,QAAQ;gBACxB,eAAe,CAAC,iBAAiB;SACpC,CAAC,CAAC;QACH,MAAM,CAAC,KAAK,CAAC,0BAA0B,CACrC,EAAE,MAAM,EAAE,QAAQ,EAAE,EACpB,EAAE,OAAO,EAAE,YAAY,EAAE,EACzB,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CACrC,CAAC;QAEF,uBAAuB;QACvB,IAAI,YAAY,GAAG,MAAM,CAAC,aAAa,CAAC;YACtC,IAAI,EAAE;gBACJ,KAAK,EAAE,gBAAgB,CAAC,CAAC,CAAC;gBAC1B,MAAM,EAAE,gBAAgB,CAAC,CAAC,CAAC;gBAC3B,kBAAkB,EAAE,CAAC;aACtB;YACD,MAAM,EAAE,sBAAsB;YAC9B,KAAK,EAAE,eAAe,CAAC,iBAAiB;SACzC,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,GAAG,IAAI,8BAAgB,CAC1C,MAAM,EACN,gBAAgB,CAAC,CAAC,CAAC,EACnB,gBAAgB,CAAC,CAAC,CAAC,CACpB,CAAC;QAEF,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,eAAe,CAAC;YACxC,MAAM,EAAE,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACtC,OAAO,EAAE;gBACP;oBACE,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,YAAY,CAAC,UAAU,EAAE;iBACpC;gBACD;oBACE,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE;wBACR,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,gBAAgB;qBAC/C;iBACF;gBACD;oBACE,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE;wBACR,MAAM,EAAE,IAAI,CAAC,eAAe;qBAC7B;iBACF;gBACD;oBACE,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE;wBACR,MAAM,EAAE,eAAe;qBACxB;iBACF;aACF;SACF,CAAC,CAAC;QACH,gDAAgD;QAChD,4CAA4C;QAC5C,eAAe;QACf,QAAQ;QACR,oBAAoB;QACpB,oBAAoB;QACpB,kCAAkC;QAClC,UAAU;QACV,QAAQ;QACR,MAAM;QACN,MAAM;QACN,IAAI,MAAM,GAAG,IAAI,CAAC;QAClB,SAAS,KAAK;YACZ,uCAAuC;YACvC,IAAI,CAAC,SAAS,CAAC,OAAO;gBAAE,OAAO;YAE/B,IAAM,cAAc,GAAG,MAAM,CAAC,oBAAoB,EAAE,CAAC;YACrD,IAAM,WAAW,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,CAAC;YAE7D,IAAM,oBAAoB,GAA4B;gBACpD,gBAAgB,EAAE;oBAChB;wBACE,IAAI,EAAE,WAAW;wBACjB,SAAS,EAAE,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE;wBACnD,OAAO,EAAE,OAAqB;qBAC/B;iBACF;gBACD,sBAAsB,EAAE;oBACtB,IAAI,EAAE,YAAY,CAAC,UAAU,EAAE;oBAC/B,cAAc,EAAE,GAAG;oBACnB,YAAY,EAAE,OAAO;oBACrB,gBAAgB,EAAE,CAAC;oBACnB,cAAc,EAAE,OAAO;iBACxB;aACF,CAAC;YAEF,IAAM,WAAW,GAAG,cAAc,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC;YAEzE,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YAClC,WAAW,CAAC,eAAe,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;YAC1C,WAAW,CAAC,YAAY,CAAC,CAAC,EAAE,MAAM,CAAC,WAAY,CAAC,CAAC;YACjD,WAAW,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC7B,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,YAAa,CAAC,CAAC;YAC9C,WAAW,CAAC,eAAe,CAAC,CAAC,EAAE,MAAM,CAAC,kBAAmB,CAAC,CAAC;YAC3D,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACjD,WAAW,CAAC,OAAO,EAAE,CAAC;YAEtB,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC/C,qBAAqB,CAAC,KAAK,CAAC,CAAC;QAC/B,CAAC;QAED,qBAAqB,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;IAED,8BAAW,GAAX,UAAY,QAAuB;QACjC,2DAA2D;QAC3D,IAAI,CAAC,gBAAiB,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAChD,IAAI,aAAa,GAAkB,EAAE,CAAC;QACtC,IAAI,MAAM,GAAW,IAAI,CAAC;QAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YAC3C,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAChC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAChC,aAAa,CAAC,IAAI,CAChB,CAAC,GAAG,MAAM,EACV,CAAC,GAAG,MAAM,EACV,CAAC,GAAG,MAAM,EACV,CAAC,GAAG,MAAM,EACV,CAAC,GAAG,MAAM,EACV,CAAC,GAAG,MAAM,EACV,CAAC,GAAG,MAAM,EACV,CAAC,GAAG,MAAM,EACV,CAAC,GAAG,MAAM,EACV,CAAC,GAAG,MAAM,EACV,CAAC,GAAG,MAAM,EACV,CAAC,GAAG,MAAM,CACX,CAAC;SACH;QACD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;YACjD,IAAI,EAAE,aAAa,CAAC,MAAM,GAAG,CAAC;YAC9B,KAAK,EAAE,cAAc,CAAC,MAAM;YAC5B,gBAAgB,EAAE,IAAI;SACvB,CAAC,CAAC;QACH,IAAI,YAAY,CAAC,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,CAAC,CAAC,GAAG,CAC5D,aAAa,CACd,CAAC;QACF,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,CAAC;QAChC,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;QAEtC,qDAAqD;QACrD,sDAAsD;QACtD,eAAe;QACf,QAAQ;QACR,oBAAoB;QACpB,oBAAoB;QACpB,yDAAyD;QACzD,UAAU;QACV,QAAQ;QACR,MAAM;QACN,MAAM;IACR,CAAC;IAED,iCAAc,GAAd,UAAe,WAAmB;QAChC,IAAI,CAAC,gBAAiB,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IAChE,CAAC;IAED,+BAAY,GAAZ,UAAa,KAAa;QACxB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,CAC3B,IAAI,CAAC,eAAgB,EACrB,CAAC,EACD,IAAI,YAAY,CAAC,CAAC,KAAK,CAAC,CAAC,EACzB,CAAC,EACD,CAAC,CACF,CAAC;IACJ,CAAC;IAED,iCAAc,GAAd,UAAe,KAAa;QAC1B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,CAC3B,IAAI,CAAC,eAAgB,EACrB,CAAC,EACD,IAAI,YAAY,CAAC,CAAC,KAAK,CAAC,CAAC,EACzB,CAAC,EACD,CAAC,CACF,CAAC;IACJ,CAAC;IACH,eAAC;AAAD,CA7WA,AA6WC,IAAA;AACD,qBAAe,QAAQ,CAAC","file":"render.js","sourcesContent":["import TerrainGenerator from \"./terrain_generator\";\r\nimport { display_2d_vert, display_2d_frag, node_vert, node_frag } from \"./wgsl\";\r\n\r\nclass Renderer {\r\n  public uniform2DBuffer: GPUBuffer | null = null;\r\n  public terrainGenerator: TerrainGenerator | null = null;\r\n  public device: GPUDevice;\r\n  public bindGroup2D: GPUBindGroup | null = null;\r\n  public nodeBindGroup: GPUBindGroup | null = null;\r\n  public nodePositionBuffer: GPUBuffer | null = null;\r\n  public nodePipeline: GPURenderPipeline | null = null;\r\n  public nodeLength: number = 1;\r\n\r\n  constructor(\r\n    adapter: GPUAdapter,\r\n    device: GPUDevice,\r\n    canvasRef: React.RefObject<HTMLCanvasElement>,\r\n    colormap: ImageBitmap\r\n  ) {\r\n    this.device = device;\r\n    // Check that canvas is active\r\n    if (canvasRef.current === null) return;\r\n    const context = canvasRef.current.getContext(\"webgpu\")!;\r\n\r\n    const devicePixelRatio = window.devicePixelRatio || 1;\r\n    const presentationSize = [\r\n      canvasRef.current.clientWidth * devicePixelRatio,\r\n      canvasRef.current.clientHeight * devicePixelRatio,\r\n    ];\r\n    const presentationFormat = context.getPreferredFormat(adapter);\r\n\r\n    context.configure({\r\n      device,\r\n      format: presentationFormat,\r\n      size: presentationSize,\r\n    });\r\n\r\n    this.nodePositionBuffer = device.createBuffer({\r\n      size: 6 * 2 * 4,\r\n      usage: GPUBufferUsage.VERTEX,\r\n      mappedAtCreation: true,\r\n    });\r\n    new Float32Array(this.nodePositionBuffer.getMappedRange()).set([\r\n      1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1,\r\n    ]);\r\n    this.nodePositionBuffer.unmap();\r\n\r\n    this.nodePipeline = device.createRenderPipeline({\r\n      vertex: {\r\n        module: device.createShaderModule({\r\n          code: node_vert,\r\n        }),\r\n        entryPoint: \"main\",\r\n        buffers: [\r\n          {\r\n            arrayStride: 2 * 4,\r\n            attributes: [\r\n              {\r\n                format: \"float32x2\" as GPUVertexFormat,\r\n                offset: 0,\r\n                shaderLocation: 0,\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n      fragment: {\r\n        module: device.createShaderModule({\r\n          code: node_frag,\r\n        }),\r\n        entryPoint: \"main\",\r\n        targets: [\r\n          {\r\n            format: presentationFormat,\r\n          },\r\n        ],\r\n      },\r\n      primitive: {\r\n        topology: \"triangle-list\",\r\n      },\r\n      depthStencil: {\r\n        format: \"depth24plus-stencil8\",\r\n        depthWriteEnabled: true,\r\n        depthCompare: \"less\",\r\n      },\r\n    });\r\n\r\n    const pipeline = device.createRenderPipeline({\r\n      vertex: {\r\n        module: device.createShaderModule({\r\n          code: display_2d_vert,\r\n        }),\r\n        entryPoint: \"main\",\r\n        buffers: [\r\n          {\r\n            arrayStride: 4 * 4,\r\n            attributes: [\r\n              {\r\n                format: \"float32x4\" as GPUVertexFormat,\r\n                offset: 0,\r\n                shaderLocation: 0,\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n      fragment: {\r\n        module: device.createShaderModule({\r\n          code: display_2d_frag,\r\n        }),\r\n        entryPoint: \"main\",\r\n        targets: [\r\n          {\r\n            format: presentationFormat,\r\n          },\r\n        ],\r\n      },\r\n      primitive: {\r\n        topology: \"triangle-list\",\r\n      },\r\n      depthStencil: {\r\n        format: \"depth24plus-stencil8\",\r\n        depthWriteEnabled: true,\r\n        depthCompare: \"less\",\r\n      },\r\n    });\r\n\r\n    // Vertices to render\r\n    var dataBuf2D = device.createBuffer({\r\n      size: 6 * 4 * 4,\r\n      usage: GPUBufferUsage.VERTEX,\r\n      mappedAtCreation: true,\r\n    });\r\n    new Float32Array(dataBuf2D.getMappedRange()).set([\r\n      1,\r\n      -1,\r\n      0,\r\n      1, // position\r\n      -1,\r\n      -1,\r\n      0,\r\n      1, // position\r\n      -1,\r\n      1,\r\n      0,\r\n      1, // position\r\n      1,\r\n      -1,\r\n      0,\r\n      1, // position\r\n      -1,\r\n      1,\r\n      0,\r\n      1, // position\r\n      1,\r\n      1,\r\n      0,\r\n      1, // position\r\n    ]);\r\n    dataBuf2D.unmap();\r\n\r\n    // Set up uniform buffers for bind group\r\n    this.uniform2DBuffer = device.createBuffer({\r\n      size: 2 * 4,\r\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n    });\r\n    device.queue.writeBuffer(\r\n      this.uniform2DBuffer,\r\n      0,\r\n      new Float32Array([0.8, 0.2]),\r\n      0,\r\n      2\r\n    );\r\n    const imageSizeBuffer = device.createBuffer({\r\n      size: 2 * 4,\r\n      usage: GPUBufferUsage.UNIFORM,\r\n      mappedAtCreation: true,\r\n    });\r\n    new Uint32Array(imageSizeBuffer.getMappedRange()).set(presentationSize);\r\n    imageSizeBuffer.unmap();\r\n    const nodeDataBuffer = device.createBuffer({\r\n      size: 16,\r\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\r\n    });\r\n\r\n    // Load colormap texture\r\n    const colorTexture = device.createTexture({\r\n      size: [colormap.width, colormap.height, 1],\r\n      format: \"rgba8unorm\",\r\n      usage:\r\n        GPUTextureUsage.TEXTURE_BINDING |\r\n        GPUTextureUsage.COPY_DST |\r\n        GPUTextureUsage.RENDER_ATTACHMENT,\r\n    });\r\n    device.queue.copyExternalImageToTexture(\r\n      { source: colormap },\r\n      { texture: colorTexture },\r\n      [colormap.width, colormap.height, 1]\r\n    );\r\n\r\n    // Create depth texture\r\n    var depthTexture = device.createTexture({\r\n      size: {\r\n        width: presentationSize[0],\r\n        height: presentationSize[1],\r\n        depthOrArrayLayers: 1,\r\n      },\r\n      format: \"depth24plus-stencil8\",\r\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\r\n    });\r\n\r\n    this.terrainGenerator = new TerrainGenerator(\r\n      device,\r\n      presentationSize[0],\r\n      presentationSize[1]\r\n    );\r\n\r\n    this.bindGroup2D = device.createBindGroup({\r\n      layout: pipeline.getBindGroupLayout(0),\r\n      entries: [\r\n        {\r\n          binding: 0,\r\n          resource: colorTexture.createView(),\r\n        },\r\n        {\r\n          binding: 1,\r\n          resource: {\r\n            buffer: this.terrainGenerator.pixelValueBuffer,\r\n          },\r\n        },\r\n        {\r\n          binding: 2,\r\n          resource: {\r\n            buffer: this.uniform2DBuffer,\r\n          },\r\n        },\r\n        {\r\n          binding: 3,\r\n          resource: {\r\n            buffer: imageSizeBuffer,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n    // this.nodeBindGroup = device.createBindGroup({\r\n    //   layout: pipeline.getBindGroupLayout(1),\r\n    //   entries: [\r\n    //     {\r\n    //       binding: 0,\r\n    //       resource: {\r\n    //         buffer: nodeDataBuffer,\r\n    //       }\r\n    //     }\r\n    //   ]\r\n    // });\r\n    var render = this;\r\n    function frame() {\r\n      // Sample is no longer the active page.\r\n      if (!canvasRef.current) return;\r\n\r\n      const commandEncoder = device.createCommandEncoder();\r\n      const textureView = context.getCurrentTexture().createView();\r\n\r\n      const renderPassDescriptor: GPURenderPassDescriptor = {\r\n        colorAttachments: [\r\n          {\r\n            view: textureView,\r\n            loadValue: { r: 0.157, g: 0.173, b: 0.204, a: 1.0 },\r\n            storeOp: \"store\" as GPUStoreOp,\r\n          },\r\n        ],\r\n        depthStencilAttachment: {\r\n          view: depthTexture.createView(),\r\n          depthLoadValue: 1.0,\r\n          depthStoreOp: \"store\",\r\n          stencilLoadValue: 0,\r\n          stencilStoreOp: \"store\",\r\n        },\r\n      };\r\n\r\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\r\n\r\n      passEncoder.setPipeline(pipeline);\r\n      passEncoder.setVertexBuffer(0, dataBuf2D);\r\n      passEncoder.setBindGroup(0, render.bindGroup2D!);\r\n      passEncoder.draw(6, 1, 0, 0);\r\n      passEncoder.setPipeline(render.nodePipeline!);\r\n      passEncoder.setVertexBuffer(0, render.nodePositionBuffer!);\r\n      passEncoder.draw(render.nodeLength * 6, 1, 0, 0);\r\n      passEncoder.endPass();\r\n\r\n      device.queue.submit([commandEncoder.finish()]);\r\n      requestAnimationFrame(frame);\r\n    }\r\n\r\n    requestAnimationFrame(frame);\r\n  }\r\n\r\n  setNodeData(nodeData: Array<number>) {\r\n    // TODO: Implement the translation and global range options\r\n    this.terrainGenerator!.computeTerrain(nodeData);\r\n    var nodePositions: Array<number> = [];\r\n    var radius: number = 0.01;\r\n    for (var i = 0; i < nodeData.length; i += 4) {\r\n      var x = nodeData[i + 1] * 2 - 1;\r\n      var y = nodeData[i + 2] * 2 - 1;\r\n      nodePositions.push(\r\n        x + radius,\r\n        y - radius,\r\n        x - radius,\r\n        y - radius,\r\n        x - radius,\r\n        y + radius,\r\n        x + radius,\r\n        y - radius,\r\n        x - radius,\r\n        y + radius,\r\n        x + radius,\r\n        y + radius\r\n      );\r\n    }\r\n    this.nodePositionBuffer = this.device.createBuffer({\r\n      size: nodePositions.length * 4,\r\n      usage: GPUBufferUsage.VERTEX,\r\n      mappedAtCreation: true,\r\n    });\r\n    new Float32Array(this.nodePositionBuffer.getMappedRange()).set(\r\n      nodePositions\r\n    );\r\n    this.nodePositionBuffer.unmap();\r\n    this.nodeLength = nodeData.length / 4;\r\n\r\n    // this.nodeBindGroup = this.device.createBindGroup({\r\n    //   layout: this.nodePipeline!.getBindGroupLayout(1),\r\n    //   entries: [\r\n    //     {\r\n    //       binding: 0,\r\n    //       resource: {\r\n    //         buffer: this.terrainGenerator!.nodeDataBuffer,\r\n    //       }\r\n    //     }\r\n    //   ]\r\n    // });\r\n  }\r\n\r\n  setWidthFactor(widthFactor: number) {\r\n    this.terrainGenerator!.computeTerrain(undefined, widthFactor);\r\n  }\r\n\r\n  setPeakValue(value: number) {\r\n    this.device.queue.writeBuffer(\r\n      this.uniform2DBuffer!,\r\n      0,\r\n      new Float32Array([value]),\r\n      0,\r\n      1\r\n    );\r\n  }\r\n\r\n  setValleyValue(value: number) {\r\n    this.device.queue.writeBuffer(\r\n      this.uniform2DBuffer!,\r\n      4,\r\n      new Float32Array([value]),\r\n      0,\r\n      1\r\n    );\r\n  }\r\n}\r\nexport default Renderer;\r\n"]}